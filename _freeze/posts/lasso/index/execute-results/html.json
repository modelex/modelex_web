{
  "hash": "ae6b4fb32fbe03e402d42417598f0817",
  "result": {
    "markdown": "---\ntitle: \"Lasso Regression\"\nauthor: \"\"\ndate: \"2023-02-14\"\ncategories: [R, code, Lasso Regression]\n---\n\n\n## R code to estimated a lasso regression\n\nIn this example, we first generate some sample data with **`n`** observations and **`p`** predictor variables. We then define the **`lambda`** value for the lasso regression. The predictors are standardized using the **`scale`** function.\n\nNext, we define the **`lasso_coef`** function to find the lasso regression coefficients. This function takes as input the predictor matrix **`X`**, the response vector **`y`**, the **`lambda`** value, and optional inputs for the tolerance (**`tol`**) and maximum number of iterations (**`max.iter`**).\n\nThe lasso regression coefficients are estimated using a coordinate descent algorithm. The algorithm updates each coefficient **`beta[j]`** one at a time, while holding all other coefficients fixed. The **`sign`** and **`pmax`** functions are used to perform the soft-thresholding step in the lasso penalty.\n\nWe then use the **`lasso_coef`** function to find the optimal values of **`beta`** that minimize the lasso regression objective. The resulting coefficients are stored in the **`lasso_coef`** variable.\n\nFinally, we print the estimated coefficients to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate sample data\nset.seed(123)\nn <- 100\np <- 10\nX <- matrix(rnorm(n*p), nrow=n)\ny <- rnorm(n)\n\n# Define lambda value\nlambda <- 0.5\n\n# Standardize the predictors\nX <- scale(X)\n\n# Define lasso regression function\nlasso_coef <- function(X, y, lambda, tol=1e-6, max.iter=1000) {\n  n <- nrow(X)\n  p <- ncol(X)\n  beta <- numeric(p)\n  t <- 1\n  iter <- 1\n  while(iter < max.iter) {\n    beta.old <- beta\n    for(j in 1:p) {\n      Xj <- X[,j]\n      beta.j <- beta[-j]\n      r <- y - X[, -j] %*% beta.j\n      z <- Xj %*% r / n\n      beta[j] <- sign(z) * pmax(abs(z) - lambda, 0)\n    }\n    t <- sqrt(sum((beta - beta.old)^2))\n    if(t < tol) break\n    iter <- iter + 1\n  }\n  return(beta)\n}\n\n# Find lasso coefficients\nlasso_coef <- lasso_coef(X, y, lambda)\n\n# Print coefficients\nlasso_coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 0 0 0 0 0 0 0 0 0\n```\n:::\n:::\n\n\n## R code to estimated a lasso regression by maximum likelihood\n\nIn this example, we first generate some sample data with **`n`** observations and **`p`** predictor variables. We then define the **`lambda`** value for the lasso regression. The predictors are standardized using the **`scale`** function.\n\nNext, we define the **`lasso_fun`** function to optimize. This function takes as input the **`beta`** vector of regression coefficients, the predictor matrix **`X`**, the response vector **`y`**, and the **`lambda`** value. It returns the sum of the residual sum of squares and the lasso penalty term.\n\nWe then use the **`optim`** function to find the optimal value of **`beta`** that minimizes the **`lasso_fun`** function. The starting values for **`beta`** are set to zero with **`rep(0,p)`**. The other inputs to **`optim`** are the **`lasso_fun`** function, **`X`**, **`y`**, **`lambda`**, and the optimization method **`\"L-BFGS-B\"`**. The **`par`** element of the output from **`optim`** contains the estimated coefficients.\n\nFinally, we print the estimated coefficients to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate sample data\nset.seed(123)\nn <- 100\np <- 10\nX <- matrix(rnorm(n*p), nrow=n)\ny <- rnorm(n)\n\n# Define lambda value\nlambda <- 0.5\n\n# Standardize the predictors\nX <- scale(X)\n\n# Define function to optimize\nlasso_fun <- function(beta, X, y, lambda) {\n  sum((y - X %*% beta)^2) + lambda * sum(abs(beta))\n}\n\n# Use optim to find the lasso coefficients\nlasso_coef <- optim(par=rep(0,p), fn=lasso_fun, X=X, y=y, lambda=lambda, method=\"L-BFGS-B\")$par\n\n# Print coefficients\nlasso_coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.056535065 -0.002470851 -0.137985850  0.142001759  0.065821245\n [6] -0.032359319  0.093055429  0.108465377 -0.050378960  0.137882801\n```\n:::\n:::\n\n\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}