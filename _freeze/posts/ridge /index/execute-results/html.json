{
  "hash": "74e50d37e8db286e23d6c8ae0276244b",
  "result": {
    "markdown": "---\ntitle: \"Ridge Regression\"\nauthor: \"\"\ndate: \"2023-02-14\"\ncategories: [R, code, Ridge Regression]\n---\n\n\n## R code to estimated a Ridge regression\n\nIn this example, we first generate some sample data with **`n`** observations and **`p`** predictor variables. We then define the **`lambda`** value for the ridge regression.\n\nThe **`solve()`** function is used to solve the normal equation for ridge regression. We add **`lambda * diag(p)`** to the **`t(X) %*% X`** term, which is equivalent to adding the ridge penalty term to the least squares regression.\n\nFinally, we multiply the result by **`t(X) %*% y`** to get the ridge regression coefficients. The resulting coefficients are stored in the **`ridge_coef`** variable, which we print to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate sample data\nset.seed(123)\nn <- 100\np <- 10\nX <- matrix(rnorm(n*p), nrow=n)\ny <- rnorm(n)\n\n# Define lambda value\nlambda <- 0.5\n\n# Calculate ridge regression coefficients\nridge_coef <- solve(t(X) %*% X + lambda * diag(p)) %*% t(X) %*% y\n\n# Print coefficients\nridge_coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             [,1]\n [1,]  0.07984794\n [2,] -0.01184439\n [3,] -0.12429433\n [4,]  0.13299966\n [5,]  0.09073672\n [6,] -0.05055385\n [7,]  0.07607811\n [8,]  0.12667890\n [9,] -0.03903223\n[10,]  0.13433382\n```\n:::\n:::\n\n\n## R code to estimated a Ridge regression using Maximum Likelihood\n\nIn this example, we first generate some sample data with **`n`** observations and **`p`** predictor variables. We then define the **`lambda`** value for the ridge regression.\n\nNext, we define the **`ridge_fun`** function to optimize. This function takes as input the **`beta`** vector of regression coefficients, the predictor matrix **`X`**, the response vector **`y`**, and the **`lambda`** value. It returns the sum of the residual sum of squares and the ridge penalty term.\n\nWe then use the **`optim`** function to find the optimal value of **`beta`** that minimizes the **`ridge_fun`** function. The starting values for **`beta`** are set to zero with **`rep(0,p)`**. The other inputs to **`optim`** are the **`ridge_fun`** function, **`X`**, **`y`**, and **`lambda`**. The **`par`** element of the output from **`optim`** contains the estimated coefficients.\n\nFinally, we print the estimated coefficients to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate sample data\nset.seed(123)\nn <- 100\np <- 10\nX <- matrix(rnorm(n*p), nrow=n)\ny <- rnorm(n)\n\n# Define lambda value\nlambda <- 0.5\n\n# Define function to optimize\nridge_fun <- function(beta, X, y, lambda) {\n  sum((y - X %*% beta)^2) + lambda * sum(beta^2)\n}\n\n# Use optim to find the ridge regression coefficients\nridge_coef <- optim(par=rep(0,p), fn=ridge_fun, X=X, y=y, lambda=lambda)$par\n\n# Print coefficients\nridge_coef\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0.06569894 -0.03125730 -0.14052688  0.11597308  0.05311027 -0.04749896\n [7]  0.06472437  0.10817340 -0.05156010  0.12377936\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}